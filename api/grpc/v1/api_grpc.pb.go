// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: grpc/v1/api.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiService_CreateTool_FullMethodName       = "/grpc.ApiService/CreateTool"
	ApiService_GetToolList_FullMethodName      = "/grpc.ApiService/GetToolList"
	ApiService_DelTools_FullMethodName         = "/grpc.ApiService/DelTools"
	ApiService_CallTool_FullMethodName         = "/grpc.ApiService/CallTool"
	ApiService_PreSignedUrl_FullMethodName     = "/grpc.ApiService/PreSignedUrl"
	ApiService_CreateDialog_FullMethodName     = "/grpc.ApiService/CreateDialog"
	ApiService_GetDialogList_FullMethodName    = "/grpc.ApiService/GetDialogList"
	ApiService_GetDialog_FullMethodName        = "/grpc.ApiService/GetDialog"
	ApiService_DelDialog_FullMethodName        = "/grpc.ApiService/DelDialog"
	ApiService_GetDialogMsgList_FullMethodName = "/grpc.ApiService/GetDialogMsgList"
	ApiService_AddDialogMsg_FullMethodName     = "/grpc.ApiService/AddDialogMsg"
	ApiService_GetProfile_FullMethodName       = "/grpc.ApiService/GetProfile"
	ApiService_UpdateProfile_FullMethodName    = "/grpc.ApiService/UpdateProfile"
	ApiService_GetAccount_FullMethodName       = "/grpc.ApiService/GetAccount"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	// tool APIs
	CreateTool(ctx context.Context, in *CreateToolRequest, opts ...grpc.CallOption) (*CreateToolResponse, error)
	GetToolList(ctx context.Context, in *GetToolListRequest, opts ...grpc.CallOption) (*GetToolListResponse, error)
	DelTools(ctx context.Context, in *DelToolsRequest, opts ...grpc.CallOption) (*DelToolsResponse, error)
	CallTool(ctx context.Context, in *CallToolRequest, opts ...grpc.CallOption) (*CallToolResponse, error)
	// store APIs
	PreSignedUrl(ctx context.Context, in *PreSignedUrlRequest, opts ...grpc.CallOption) (*PreSignedUrlResponse, error)
	// dialog APIs
	CreateDialog(ctx context.Context, in *AddDialogRequest, opts ...grpc.CallOption) (*AddDialogResponse, error)
	GetDialogList(ctx context.Context, in *GetDialogListRequest, opts ...grpc.CallOption) (*GetDialogListResponse, error)
	GetDialog(ctx context.Context, in *GetDialogDetailRequest, opts ...grpc.CallOption) (*GetDialogDetailResponse, error)
	DelDialog(ctx context.Context, in *DelDialogRequest, opts ...grpc.CallOption) (*DelDialogResponse, error)
	GetDialogMsgList(ctx context.Context, in *GetDialogMsgListRequest, opts ...grpc.CallOption) (*GetDialogMsgListResponse, error)
	AddDialogMsg(ctx context.Context, in *AddDialogMsgRequest, opts ...grpc.CallOption) (*AddDialogMsgResponse, error)
	// profile
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) CreateTool(ctx context.Context, in *CreateToolRequest, opts ...grpc.CallOption) (*CreateToolResponse, error) {
	out := new(CreateToolResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateTool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToolList(ctx context.Context, in *GetToolListRequest, opts ...grpc.CallOption) (*GetToolListResponse, error) {
	out := new(GetToolListResponse)
	err := c.cc.Invoke(ctx, ApiService_GetToolList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DelTools(ctx context.Context, in *DelToolsRequest, opts ...grpc.CallOption) (*DelToolsResponse, error) {
	out := new(DelToolsResponse)
	err := c.cc.Invoke(ctx, ApiService_DelTools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CallTool(ctx context.Context, in *CallToolRequest, opts ...grpc.CallOption) (*CallToolResponse, error) {
	out := new(CallToolResponse)
	err := c.cc.Invoke(ctx, ApiService_CallTool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) PreSignedUrl(ctx context.Context, in *PreSignedUrlRequest, opts ...grpc.CallOption) (*PreSignedUrlResponse, error) {
	out := new(PreSignedUrlResponse)
	err := c.cc.Invoke(ctx, ApiService_PreSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateDialog(ctx context.Context, in *AddDialogRequest, opts ...grpc.CallOption) (*AddDialogResponse, error) {
	out := new(AddDialogResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDialogList(ctx context.Context, in *GetDialogListRequest, opts ...grpc.CallOption) (*GetDialogListResponse, error) {
	out := new(GetDialogListResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDialogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDialog(ctx context.Context, in *GetDialogDetailRequest, opts ...grpc.CallOption) (*GetDialogDetailResponse, error) {
	out := new(GetDialogDetailResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DelDialog(ctx context.Context, in *DelDialogRequest, opts ...grpc.CallOption) (*DelDialogResponse, error) {
	out := new(DelDialogResponse)
	err := c.cc.Invoke(ctx, ApiService_DelDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDialogMsgList(ctx context.Context, in *GetDialogMsgListRequest, opts ...grpc.CallOption) (*GetDialogMsgListResponse, error) {
	out := new(GetDialogMsgListResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDialogMsgList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddDialogMsg(ctx context.Context, in *AddDialogMsgRequest, opts ...grpc.CallOption) (*AddDialogMsgResponse, error) {
	out := new(AddDialogMsgResponse)
	err := c.cc.Invoke(ctx, ApiService_AddDialogMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, ApiService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, ApiService_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	// tool APIs
	CreateTool(context.Context, *CreateToolRequest) (*CreateToolResponse, error)
	GetToolList(context.Context, *GetToolListRequest) (*GetToolListResponse, error)
	DelTools(context.Context, *DelToolsRequest) (*DelToolsResponse, error)
	CallTool(context.Context, *CallToolRequest) (*CallToolResponse, error)
	// store APIs
	PreSignedUrl(context.Context, *PreSignedUrlRequest) (*PreSignedUrlResponse, error)
	// dialog APIs
	CreateDialog(context.Context, *AddDialogRequest) (*AddDialogResponse, error)
	GetDialogList(context.Context, *GetDialogListRequest) (*GetDialogListResponse, error)
	GetDialog(context.Context, *GetDialogDetailRequest) (*GetDialogDetailResponse, error)
	DelDialog(context.Context, *DelDialogRequest) (*DelDialogResponse, error)
	GetDialogMsgList(context.Context, *GetDialogMsgListRequest) (*GetDialogMsgListResponse, error)
	AddDialogMsg(context.Context, *AddDialogMsgRequest) (*AddDialogMsgResponse, error)
	// profile
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) CreateTool(context.Context, *CreateToolRequest) (*CreateToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTool not implemented")
}
func (UnimplementedApiServiceServer) GetToolList(context.Context, *GetToolListRequest) (*GetToolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToolList not implemented")
}
func (UnimplementedApiServiceServer) DelTools(context.Context, *DelToolsRequest) (*DelToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTools not implemented")
}
func (UnimplementedApiServiceServer) CallTool(context.Context, *CallToolRequest) (*CallToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTool not implemented")
}
func (UnimplementedApiServiceServer) PreSignedUrl(context.Context, *PreSignedUrlRequest) (*PreSignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSignedUrl not implemented")
}
func (UnimplementedApiServiceServer) CreateDialog(context.Context, *AddDialogRequest) (*AddDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialog not implemented")
}
func (UnimplementedApiServiceServer) GetDialogList(context.Context, *GetDialogListRequest) (*GetDialogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogList not implemented")
}
func (UnimplementedApiServiceServer) GetDialog(context.Context, *GetDialogDetailRequest) (*GetDialogDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialog not implemented")
}
func (UnimplementedApiServiceServer) DelDialog(context.Context, *DelDialogRequest) (*DelDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDialog not implemented")
}
func (UnimplementedApiServiceServer) GetDialogMsgList(context.Context, *GetDialogMsgListRequest) (*GetDialogMsgListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogMsgList not implemented")
}
func (UnimplementedApiServiceServer) AddDialogMsg(context.Context, *AddDialogMsgRequest) (*AddDialogMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDialogMsg not implemented")
}
func (UnimplementedApiServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedApiServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedApiServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_CreateTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTool(ctx, req.(*CreateToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetToolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToolList(ctx, req.(*GetToolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DelTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DelTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DelTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DelTools(ctx, req.(*DelToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CallTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CallTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CallTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CallTool(ctx, req.(*CallToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_PreSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PreSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_PreSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PreSignedUrl(ctx, req.(*PreSignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateDialog(ctx, req.(*AddDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDialogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDialogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDialogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDialogList(ctx, req.(*GetDialogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDialog(ctx, req.(*GetDialogDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DelDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DelDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DelDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DelDialog(ctx, req.(*DelDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDialogMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogMsgListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDialogMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDialogMsgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDialogMsgList(ctx, req.(*GetDialogMsgListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddDialogMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDialogMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddDialogMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddDialogMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddDialogMsg(ctx, req.(*AddDialogMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTool",
			Handler:    _ApiService_CreateTool_Handler,
		},
		{
			MethodName: "GetToolList",
			Handler:    _ApiService_GetToolList_Handler,
		},
		{
			MethodName: "DelTools",
			Handler:    _ApiService_DelTools_Handler,
		},
		{
			MethodName: "CallTool",
			Handler:    _ApiService_CallTool_Handler,
		},
		{
			MethodName: "PreSignedUrl",
			Handler:    _ApiService_PreSignedUrl_Handler,
		},
		{
			MethodName: "CreateDialog",
			Handler:    _ApiService_CreateDialog_Handler,
		},
		{
			MethodName: "GetDialogList",
			Handler:    _ApiService_GetDialogList_Handler,
		},
		{
			MethodName: "GetDialog",
			Handler:    _ApiService_GetDialog_Handler,
		},
		{
			MethodName: "DelDialog",
			Handler:    _ApiService_DelDialog_Handler,
		},
		{
			MethodName: "GetDialogMsgList",
			Handler:    _ApiService_GetDialogMsgList_Handler,
		},
		{
			MethodName: "AddDialogMsg",
			Handler:    _ApiService_AddDialogMsg_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ApiService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/v1/api.proto",
}
